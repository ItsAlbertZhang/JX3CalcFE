on: push

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 1. checkout repository
        uses: actions/checkout@v4

      - name: 2. setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 3. install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 4. install frontend dependencies
        run: npm install

      - name: 5. check if tag exists
        id: check_tag
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const configPath = "./src-tauri/tauri.conf.json";
            const config = JSON.parse(fs.readFileSync(configPath, "utf8"));
            const tag = `v${config.package.version}`;
            console.log("tag: ", tag);
            const tagsUrl = context.payload.repository.tags_url;
            const response = await github.request(tagsUrl);
            const tags = response.data;
            console.log("tags:", tags);
            const tagIndex = tags.findIndex((t) => t.name === tag);
            const tagExists = tagIndex !== -1;
            console.log("tagExists:", tagExists);
            return tagExists;
          result-encoding: string

      - name: 6. build (if tag does not exist)
        if: steps.check_tag.outputs.result == 'false'
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # 密钥，需要提前配置在 Github Secrets 中
          TAURI_KEY_PASSWORD: ""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: "jx3calc v__VERSION__"
          releaseDraft: true
          prerelease: false

      - name: 6. build (if tag exists)
        if: steps.check_tag.outputs.result == 'true'
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 7. parse artifact paths (only if tag exists)
        if: steps.check_tag.outputs.result == 'true'
        id: parse_paths
        uses: actions/github-script@v7
        with:
          script: |
            const artifactPathsInput = '${{ steps.build.outputs.artifactPaths }}';
            const artifactPathsStr = artifactPathsInput.replace(/\\/g, '/');
            const artifactPaths = JSON.parse(artifactPathsStr);
            const artifactPathsOutput = artifactPaths.join('\n');
            return artifactPathsOutput;
          result-encoding: string

      - name: 8. upload artifact (only if tag exists)
        if: steps.check_tag.outputs.result == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}
          path: ${{ steps.parse_paths.outputs.result }}
